{"name":"Express-couchdb-core","tagline":"Core RESTful API interface to CouchDb Documents","body":"# Express CouchDb Core\r\n\r\nThis module provides a generic restful api for accessing couchdb\r\ndocuments.  By dropping this module in your express application you can\r\nimmediately start managing couchdb documents via a restful crud\r\ninterface in your single page application.  This module only includes\r\nlist, create, read, update and delete, it does not include any view or\r\nquery functionality, this has to be implemented in your express\r\napplication.\r\n\r\n## Install\r\n\r\n``` sh\r\nnpm install express-couchdb-core --save\r\n// add model design and all view to couchDb\r\nnode init.js [couchdb]\r\n```\r\n\r\n## Usage\r\n\r\n``` js\r\nvar core = require('express-couchdb-core');\r\nvar config = { couch: 'http://localhost:5984/foo' };\r\napp.config(function() {\r\n  // handle other requests first\r\n  app.use(express.router);\r\n  // handle core requests\r\n  app.use(core(config));\r\n});\r\n```\r\n\r\n### Optional configuration\r\n\r\nIf you would like to dynamically change which database is being used, then use \r\nthe following configuration and set the request parameter given to the name of \r\nthe database to use. The `database_parameter_name` is optional and will default \r\nto `\"COUCH_DB\"`. \r\n\r\n``` js\r\nvar config = { url: 'http://localhost:5984', database_parameter_name: 'COUCH_DB'}\r\n```\r\n\r\n## API\r\n\r\nThe api uses the term model to represent the document type, and it is\r\nassumed that when you store your documents you will use the type node in\r\nthe document to represent the model type.  For example, \r\n\r\n``` json\r\n{\r\n  \"_id\": \"123456789\",\r\n  \"name\": \"Johnny Paper\",\r\n  \"type\": \"person\"\r\n}\r\n```\r\n\r\nRESTFul call\r\n\r\n```\r\nGET /api/person\r\n```\r\n\r\nwill return all documents of type \"person\"\r\n\r\n### GET /api/:model \r\n\r\nReturns a list of documents of the type `:model`\r\n\r\n### POST /api/:model\r\n\r\nCreate a document of type `:model`\r\n\r\n### GET /api/:model/:id\r\n\r\nReturns a couch document\r\n\r\n### PUT /api/:model/:id\r\n\r\nUpdates an existing couch document or creates a couch document with\r\nspecific id\r\n\r\n### DEL /api/:model/:id\r\n\r\nDeletes a couch document\r\n\r\n## Adding Child docs\r\n\r\nThis module comes with a feature to add child docs that can\r\nalso be pulled down with a get request from the parent as\r\nan array in the parent node.\r\n\r\nFor Example:\r\n\r\nPOST /api/foo\r\n``` json\r\n{\r\n  \"_id\": 1,\r\n  \"_rev\": 1,\r\n  \"name\": \"bar\",\r\n  \"type\": \"foo\"\r\n}\r\n```\r\n\r\nNext we post a child document to foo and we use the underscore\r\nto indicate it is a child document type and use the [model]_id\r\nto assign ownership to the parent document.\r\n\r\nPOST /api/foo_bar\r\n\r\n``` json\r\n{\r\n  \"_id\": 2,\r\n  \"_rev\": 1,\r\n  \"name\": \"baz\",\r\n  \"type\": \"foo_bar\",\r\n  \"foo_id\": 1\r\n}\r\n```\r\n\r\nThis will link the document type foo_bar as a child to document\r\ntype foo.  And when you get the foo document of id 1, it will return\r\nthe foo document with a key called foo_bar: [] and the child document \r\nin that array.\r\n\r\nGET /api/foo/1\r\n\r\n``` json\r\n{\r\n  \"_id\": 1,\r\n  \"_rev\": 1,\r\n  \"name\": \"bar\",\r\n  \"type\": \"foo\",\r\n  \"foo_bar\": [{\r\n    \"_id\": 2,\r\n    \"_rev\": 1,\r\n    \"name\": \"baz\",\r\n    \"type\": \"foo_bar\",\r\n    \"foo_id\": 1\r\n  }]\r\n}\r\n```\r\n\r\nyou can have multiple children docs attached to a parent\r\ndoc.\r\n\r\n## License\r\n\r\nMIT\r\n\r\n## Contributions\r\n\r\nPull Requests Welcome\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}